/* @r{multiboot.h - Multiboot header file.} */
/* @r{Copyright (C) 1999,2003,2007,2008,2009,2010  Free Software Foundation, Inc.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL ANY
 *  DEVELOPER OR DISTRIBUTOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
 *  IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
} */

#ifndef MULTIBOOT_HEADER
#define MULTIBOOT_HEADER 1

/* @r{How many bytes from the start of the file we search for the header.} */
/* @r{在文件的前多少字节内寻找Multiboot头} */
#define MULTIBOOT_SEARCH                        8192
#define MULTIBOOT_HEADER_ALIGN                  4

/* @r{The magic field should contain this.} */
/* @r{Multiboot header 的魔数} */
#define MULTIBOOT_HEADER_MAGIC                  0x1BADB002

/* @r{This should be in %eax.} */
/* @r{Multiboot兼容的引导程序传递来的魔数} */
#define MULTIBOOT_BOOTLOADER_MAGIC              0x2BADB002

/* @r{Alignment of multiboot modules.} */
#define MULTIBOOT_MOD_ALIGN                     0x00001000

/* @r{Alignment of the multiboot info structure.} */
#define MULTIBOOT_INFO_ALIGN                    0x00000004

/* @r{Flags set in the 'flags' member of the multiboot header.} */

/* @r{Align all boot modules on i386 page (4KB) boundaries.} */
#define MULTIBOOT_PAGE_ALIGN                    0x00000001

/* @r{Must pass memory information to OS.} */
#define MULTIBOOT_MEMORY_INFO                   0x00000002

/* @r{Must pass video information to OS.} */
#define MULTIBOOT_VIDEO_MODE                    0x00000004

/* @r{This flag indicates the use of the address fields in the header.} */
#define MULTIBOOT_AOUT_KLUDGE                   0x00010000

/* @r{Flags to be set in the 'flags' member of the multiboot info structure.} */

/* @r{is there basic lower/upper memory information?} */
#define MULTIBOOT_INFO_MEMORY                   0x00000001
/* @r{is there a boot device set?} */
#define MULTIBOOT_INFO_BOOTDEV                  0x00000002
/* @r{is the command-line defined?} */
#define MULTIBOOT_INFO_CMDLINE                  0x00000004
/* @r{are there modules to do something with?} */
#define MULTIBOOT_INFO_MODS                     0x00000008

/* @r{These next two are mutually exclusive} */

/* @r{is there a symbol table loaded?} */
#define MULTIBOOT_INFO_AOUT_SYMS                0x00000010
/* @r{is there an ELF section header table?} */
#define MULTIBOOT_INFO_ELF_SHDR                 0X00000020

/* @r{is there a full memory map?} */
#define MULTIBOOT_INFO_MEM_MAP                  0x00000040

/* @r{Is there drive info?} */
#define MULTIBOOT_INFO_DRIVE_INFO               0x00000080

/* @r{Is there a config table?} */
#define MULTIBOOT_INFO_CONFIG_TABLE             0x00000100

/* @r{Is there a boot loader name?} */
#define MULTIBOOT_INFO_BOOT_LOADER_NAME         0x00000200

/* @r{Is there a APM table?} */
#define MULTIBOOT_INFO_APM_TABLE                0x00000400

/* @r{Is there video information?} */
#define MULTIBOOT_INFO_VBE_INFO                 0x00000800
#define MULTIBOOT_INFO_FRAMEBUFFER_INFO         0x00001000

#ifndef ASM_FILE

typedef unsigned char           multiboot_uint8_t;
typedef unsigned short          multiboot_uint16_t;
typedef unsigned int            multiboot_uint32_t;
typedef unsigned long long      multiboot_uint64_t;


/* @r{multiboot header} */
/* @r{总共48个字节} */
struct multiboot_header
@{
  /* @r{Must be MULTIBOOT_MAGIC - see above.} */
  multiboot_uint32_t magic;

  /* @r{Feature flags.} */
  multiboot_uint32_t flags;

  /* @r{The above fields plus this one must equal 0 mod 2^32.} */
  multiboot_uint32_t checksum;

  /* @r{These are only valid if MULTIBOOT_AOUT_KLUDGE is set.} */
  multiboot_uint32_t header_addr;
  multiboot_uint32_t load_addr;
  multiboot_uint32_t load_end_addr;
  multiboot_uint32_t bss_end_addr;
  multiboot_uint32_t entry_addr;

  /* @r{These are only valid if MULTIBOOT_VIDEO_MODE is set.} */
  multiboot_uint32_t mode_type;
  multiboot_uint32_t width;
  multiboot_uint32_t height;
  multiboot_uint32_t depth;
@};

/* @r{The symbol table for a.out.} */
struct multiboot_aout_symbol_table
@{
  multiboot_uint32_t tabsize;
  multiboot_uint32_t strsize;
  multiboot_uint32_t addr;
  multiboot_uint32_t reserved;
@};
typedef struct multiboot_aout_symbol_table multiboot_aout_symbol_table_t;

/* @r{The section header table for ELF.} */
struct multiboot_elf_section_header_table
@{
  multiboot_uint32_t num;
  multiboot_uint32_t size;
  multiboot_uint32_t addr;
  multiboot_uint32_t shndx;
@};
typedef struct multiboot_elf_section_header_table multiboot_elf_section_header_table_t;

struct multiboot_info
@{
  /* @r{Multiboot info version number} */
  /* @r{0--3} */
  multiboot_uint32_t flags;

  /* @r{Available memory from BIOS} */
  /* @r{4--11} */
  multiboot_uint32_t mem_lower;
  multiboot_uint32_t mem_upper;

  /* @r{"root" partition} */
  /* @r{12--15} */
  multiboot_uint32_t boot_device;

  /* @r{Kernel command line} */
  /* @r{16--19} */
  multiboot_uint32_t cmdline;

  /* @r{Boot-Module list} */
  /* @r{20--27} */
  multiboot_uint32_t mods_count;
  multiboot_uint32_t mods_addr;


  /* @r{28--43} */
  union
  @{
    multiboot_aout_symbol_table_t aout_sym;
    multiboot_elf_section_header_table_t elf_sec;
  @} u;

  /* @r{Memory Mapping buffer} */
  /* @r{44--51} */
  multiboot_uint32_t mmap_length;
  multiboot_uint32_t mmap_addr;

  /* @r{Drive Info buffer} */
  /* @r{52--59} */
  multiboot_uint32_t drives_length;
  multiboot_uint32_t drives_addr;

  /* @r{ROM configuration table} */
  /* @r{60--63} */
  multiboot_uint32_t config_table;

  /* @r{Boot Loader Name} */
  /* @r{64--67} */
  multiboot_uint32_t boot_loader_name;

  /* @r{APM table} */
  /* @r{68--71} */
  multiboot_uint32_t apm_table;

  /* @r{Video} */
  /* @r{72--87} */
  multiboot_uint32_t vbe_control_info;
  multiboot_uint32_t vbe_mode_info;
  multiboot_uint16_t vbe_mode;
  multiboot_uint16_t vbe_interface_seg;
  multiboot_uint16_t vbe_interface_off;
  multiboot_uint16_t vbe_interface_len;


  /* @r{88--109} */
  multiboot_uint64_t framebuffer_addr;
  multiboot_uint32_t framebuffer_pitch;
  multiboot_uint32_t framebuffer_width;
  multiboot_uint32_t framebuffer_height;
  multiboot_uint8_t framebuffer_bpp;
#define MULTIBOOT_FRAMEBUFFER_TYPE_INDEXED 0
#define MULTIBOOT_FRAMEBUFFER_TYPE_RGB     1
#define MULTIBOOT_FRAMEBUFFER_TYPE_EGA_TEXT     2
  multiboot_uint8_t framebuffer_type;


  /* @r{110--115} */
  union
  @{
    struct
    @{
      multiboot_uint32_t framebuffer_palette_addr;
      multiboot_uint16_t framebuffer_palette_num_colors;
    @};
    struct
    @{
      multiboot_uint8_t framebuffer_red_field_position;
      multiboot_uint8_t framebuffer_red_mask_size;
      multiboot_uint8_t framebuffer_green_field_position;
      multiboot_uint8_t framebuffer_green_mask_size;
      multiboot_uint8_t framebuffer_blue_field_position;
      multiboot_uint8_t framebuffer_blue_mask_size;
    @};
  @};
@};
typedef struct multiboot_info multiboot_info_t;

struct multiboot_color
@{
  multiboot_uint8_t red;
  multiboot_uint8_t green;
  multiboot_uint8_t blue;
@};

struct multiboot_mmap_entry
@{
  multiboot_uint32_t size;
  multiboot_uint64_t addr;
  multiboot_uint64_t len;
#define MULTIBOOT_MEMORY_AVAILABLE              1
#define MULTIBOOT_MEMORY_RESERVED               2
#define MULTIBOOT_MEMORY_ACPI_RECLAIMABLE       3
#define MULTIBOOT_MEMORY_NVS                    4
#define MULTIBOOT_MEMORY_BADRAM                 5
  multiboot_uint32_t type;
@} __attribute__((packed));
typedef struct multiboot_mmap_entry multiboot_memory_map_t;

struct multiboot_mod_list
@{
  /* @r{the memory used goes from bytes 'mod_start' to 'mod_end-1' inclusive} */
  multiboot_uint32_t mod_start;
  multiboot_uint32_t mod_end;

  /* @r{Module command line} */
  multiboot_uint32_t cmdline;

  /* @r{padding to take it to 16 bytes (must be zero)} */
  multiboot_uint32_t pad;
@};
typedef struct multiboot_mod_list multiboot_module_t;

/* @r{APM BIOS info.} */
struct multiboot_apm_info
@{
  multiboot_uint16_t version;
  multiboot_uint16_t cseg;
  multiboot_uint32_t offset;
  multiboot_uint16_t cseg_16;
  multiboot_uint16_t dseg;
  multiboot_uint16_t flags;
  multiboot_uint16_t cseg_len;
  multiboot_uint16_t cseg_16_len;
  multiboot_uint16_t dseg_len;
@};

#endif /* @r{! ASM_FILE} */

#endif /* @r{! MULTIBOOT_HEADER} */
