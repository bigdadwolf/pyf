This is multiboot.info, produced by makeinfo version 4.13 from
multiboot.texi.

Copyright (C) 1995,96 Bryan Ford <baford@cs.utah.edu>

   Copyright (C) 1995,96 Erich Stefan Boleyn <erich@uruk.org>

   Copyright (C) 1999,2000,2001,2002,2005,2006,2009,2010 Free Software
Foundation, Inc.

     Permission is granted to make and distribute verbatim copies of
     this manual provided the copyright notice and this permission
     notice are preserved on all copies.

     Permission is granted to copy and distribute modified versions of
     this manual under the conditions for verbatim copying, provided
     also that the entire resulting derived work is distributed under
     the terms of a permission notice identical to this one.

     Permission is granted to copy and distribute translations of this
     manual into another language, under the above conditions for
     modified versions.

INFO-DIR-SECTION Kernel
START-INFO-DIR-ENTRY
* Multiboot Specification: (multiboot).		Multiboot Specification.
END-INFO-DIR-ENTRY


File: multiboot.info,  Node: Top,  Next: Overview,  Up: (dir)

Multiboot Specification
***********************

This file documents Multiboot Specification, the proposal for the boot
sequence standard. This edition documents version 0.6.96.

   本文定义了Multiboot规范——引导过程标准的提议。本文是此规范的0.6.96版。

   Copyright (C) 1995,96 Bryan Ford <baford@cs.utah.edu>

   Copyright (C) 1995,96 Erich Stefan Boleyn <erich@uruk.org>

   Copyright (C) 1999,2000,2001,2002,2005,2006,2009,2010 Free Software
Foundation, Inc.

     Permission is granted to make and distribute verbatim copies of
     this manual provided the copyright notice and this permission
     notice are preserved on all copies.

     Permission is granted to copy and distribute modified versions of
     this manual under the conditions for verbatim copying, provided
     also that the entire resulting derived work is distributed under
     the terms of a permission notice identical to this one.

     Permission is granted to copy and distribute translations of this
     manual into another language, under the above conditions for
     modified versions.

* Menu:

* Overview::
* Terminology::
* Specification::
* Examples::
* History::
* Invoking mbchk::              How to use the Multiboot checker
* Index::


File: multiboot.info,  Node: Overview,  Next: Terminology,  Prev: Top,  Up: Top

1 Introduction to Multiboot Specification
*****************************************

This chapter describes some rough information on the Multiboot
Specification. Note that this is not a part of the specification itself.

   本章描述了一些Multiboot规范的粗略信息。注意，这不是规范本身的一部分。

* Menu:

* Motivation::
* Architecture::
* Operating systems::
* Boot sources::
* Boot-time configuration::
* Convenience to operating systems::
* Boot modules::


File: multiboot.info,  Node: Motivation,  Next: Architecture,  Up: Overview

1.1 The background of Multiboot Specification
=============================================

Every operating system ever created tends to have its own boot loader.
Installing a new operating system on a machine generally involves
installing a whole new set of boot mechanisms, each with completely
different install-time and boot-time user interfaces. Getting multiple
operating systems to coexist reliably on one machine through typical
"chaining" mechanisms can be a nightmare. There is little or no choice
of boot loaders for a particular operating system -- if the one that
comes with the operating system doesn't do exactly what you want, or
doesn't work on your machine, you're screwed.

几乎每种现有的操作系统都拥有自己的引导程序。在机器上安装一个新的操作系统
时通常意味着要引入一套全新的引导机制，每种机制安装和运行界面都不相同。
使多种操作系统相安无事地共存于一个机器上通常需要借助于"链式"机制，这可是一个
噩梦。基本上你不能选择某一个操作系统的引导程序————如果操作系统自带的引导程序
不是你想要的，或者不能在你的机器上工作，你的麻烦可就大了。

   While we may not be able to fix this problem in existing proprietary
operating systems, it shouldn't be too difficult for a few people in the
free operating system communities to put their heads together and solve
this problem for the popular free operating systems. That's what this
specification aims for. Basically, it specifies an interface between a
boot loader and a operating system, such that any complying boot loader
should be able to load any complying operating system. This
specification does _not_ specify how boot loaders should work -- only
how they must interface with the operating system being loaded.

尽管不太可能解决现有的商业操作系统所存在的问题，但是对于自由操作系统社区
的人来说，将他们的领袖集合在一起并为流行的自由操作系统解决这个问题并不是
很难。这也正是这份规范的目的所在。基本上，它指出了引导程序和操作系统之间
的接口，这样符合规范的引导程序就可以引导任何符合规范的操作系统。这份规范
并_不_关心引导程序应该如何工作————只是关心他们引导操作系统时的接口。


File: multiboot.info,  Node: Architecture,  Next: Operating systems,  Prev: Motivation,  Up: Overview

1.2 The target architecture
===========================

This specification is primarily targeted at PC, since they are the most
common and have the largest variety of operating systems and boot
loaders. However, to the extent that certain other architectures may
need a boot specification and do not have one already, a variation of
this specification, stripped of the x86-specific details, could be
adopted for them as well.

这份规范主要面向PC，因为他们使用最广泛并且有最多的操作系统和引导程序。
尽管如此，对于那些需要一份引导规范并且目前缺少一份的架构来说，剥去x86架构
的相关细节得到的版本也应该可以满足需要。


File: multiboot.info,  Node: Operating systems,  Next: Boot sources,  Prev: Architecture,  Up: Overview

1.3 The target operating systems
================================

This specification is targeted toward free 32-bit operating systems
that can be fairly easily modified to support the specification without
going through lots of bureaucratic rigmarole. The particular free
operating systems that this specification is being primarily designed
for are Linux, the kernels of FreeBSD and NetBSD, Mach, and VSTa. It is
hoped that other emerging free operating systems will adopt it from the
start, and thus immediately be able to take advantage of existing boot
loaders. It would be nice if proprietary operating system vendors
eventually adopted this specification as well, but that's probably a
pipe dream.

   这份规范的目标是自由的32位操作系统，因为应该可以比较容易获得修改这些
操作系统以支持本规范的权力而不需要听满是官腔的喋喋不休。这份规范主要
是面向Linux——FreeBSD、NetBSD、Mach和VSTa这些自由操作系统的内核而设计的。
我们希望后来的自由操作系统能够从一开始就采用本规范，这样就可以立即使
用现有的引导程序了。如果商业操作系统能够最终采用本规范当然很好，但是
这很可能只是白日做梦。


File: multiboot.info,  Node: Boot sources,  Next: Boot-time configuration,  Prev: Operating systems,  Up: Overview

1.4 Boot sources
================

It should be possible to write compliant boot loaders that load the OS
image from a variety of sources, including floppy disk, hard disk, and
across a network.

实现一个可以从各种位置（软盘、硬盘或网络）载入OS映像的引导程序是现实可行的。

   Disk-based boot loaders may use a variety of techniques to find the
relevant OS image and boot module data on disk, such as by
interpretation of specific file systems (e.g. the BSD/Mach boot loader),
using precalculated "blocklists" (e.g. LILO), loading from a special
"boot partition" (e.g. OS/2), or even loading from within another
operating system (e.g. the VSTa boot code, which loads from DOS).
Similarly, network-based boot loaders could use a variety of network
hardware and protocols.

   基于磁盘的引导程序可以使用各种技术查找位于磁盘上的OS映像和引导模块，
例如解释某种文件系统（如BSD/Mach引导程序），使用预先计算好的"block列表"
（如LILO），从特殊的"引导分区"载入（如OS/2），或者甚至从另一个操作系统
载入（如VSTa引导代码，从DOS载入）。与此相似，基于网络的引导程序也可以
使用各种网络硬件和协议。

   It is hoped that boot loaders will be created that support multiple
loading mechanisms, increasing their portability, robustness, and
user-friendliness.

   我们希望引导程序可以支持多种载入机制，这样可以提供更好的可移植性、
健壮性和易用性。


File: multiboot.info,  Node: Boot-time configuration,  Next: Convenience to operating systems,  Prev: Boot sources,  Up: Overview

1.5 Configure an operating system at boot-time
==============================================

It is often necessary for one reason or another for the user to be able
to provide some configuration information to an operating system
dynamically at boot time. While this specification should not dictate
how this configuration information is obtained by the boot loader, it
should provide a standard means for the boot loader to pass such
information to the operating system.

总有这样或者那样的原因使得用户需要在启动时动态配置操作系统。尽管本规范
不应该对引导程序如何获得这些配置信息指手划脚，我们还是应该为如何将这些
信息传递给操作系统提供一种标准的方法。


File: multiboot.info,  Node: Convenience to operating systems,  Next: Boot modules,  Prev: Boot-time configuration,  Up: Overview

1.6 How to make OS development easier
=====================================

OS images should be easy to generate. Ideally, an OS image should simply
be an ordinary 32-bit executable file in whatever file format the
operating system normally uses. It should be possible to `nm' or
disassemble OS images just like normal executables. Specialized tools
should not be required to create OS images in a _special_ file format.
If this means shifting some work from the operating system to a boot
loader, that is probably appropriate, because all the memory consumed
by the boot loader will typically be made available again after the
boot process is created, whereas every bit of code in the OS image
typically has to remain in memory forever. The operating system should
not have to worry about getting into 32-bit mode initially, because mode
switching code generally needs to be in the boot loader anyway in order
to load operating system data above the 1MB boundary, and forcing the
operating system to do this makes creation of OS images much more
difficult.

应尽量降低生成OS映像的难度。在理想情况下，OS映像应该是该操作系统通常使用的
普通32位可执行文件格式。应该能够像对待普通可执行文件格式一样用`nm'
或者反汇编OS映像，而不应该用特殊的工具生成_特殊_文件格式的OS映像。
如果者意味着将一部分的操作系统的功能转移到引导程序中的话，这很合适。因为
任何引导程序用到的内存都应该可由它所创建的真正的系统自由使用，这样OS映像中
的每一个比特都应该永远存在于内存中。操作系统应该不必考虑如何进入32位地址
模式，因为模式切换应该位于引导程序中，而这些程序通常需要将操作系统数据
装入到1MB以上的内存中，如果操作系统需要考虑这些问题的话，创建OS映像的工作
将会变得更加困难。

   Unfortunately, there is a horrendous variety of executable file
formats even among free Unix-like PC-based operating systems --
generally a different format for each operating system. Most of the
relevant free operating systems use some variant of a.out format, but
some are moving to ELF. It is highly desirable for boot loaders not to
have to be able to interpret all the different types of executable file
formats in existence in order to load the OS image -- otherwise the
boot loader effectively becomes operating system specific again.

   不幸的是，仅在PC平台上的自由UNIX类系统中也有多得惊人的可执行文件格式
——通常各种操作系统的格式都不相同。大多数自由操作系统使用的是a.out格式的
变种，但是有一些已经改用了ELF格式。最好是引导程序不必为了载入OS映像
而需要理解所有的可执行文件格式——否则的话，引导程序又变成了某个操作系统
专用的了。

   This specification adopts a compromise solution to this problem.
Multiboot-compliant OS images always contain a magic "Multiboot header"
(*note OS image format::), which allows the boot loader to load the
image without having to understand numerous a.out variants or other
executable formats. This magic header does not need to be at the very
beginning of the executable file, so kernel images can still conform to
the local a.out format variant in addition to being Multiboot-compliant.

这份规范采用一种折衷的方案。符合Multiboot规范的OS映象总是包含一个magic
" Multiboot头"（参见*note OS image
format::），这样引导程序就不必理解种类繁多的
a.out变体或者其他什么可执行格式。magic头不必位于可执行文件的最前面，这样
OS 映象就可以在保持同a.out格式兼容的同时做到符合Multiboot规范。


File: multiboot.info,  Node: Boot modules,  Prev: Convenience to operating systems,  Up: Overview

1.7 Boot modules
================

Many modern operating system kernels, such as Mach and the microkernel
in VSTa, do not by themselves contain enough mechanism to get the
system fully operational: they require the presence of additional
software modules at boot time in order to access devices, mount file
systems, etc. While these additional modules could be embedded in the
main OS image along with the kernel itself, and the resulting image be
split apart manually by the operating system when it receives control,
it is often more flexible, more space-efficient, and more convenient to
the operating system and user if the boot loader can load these
additional modules independently in the first place.

   Thus, this specification should provide a standard method for a boot
loader to indicate to the operating system what auxiliary boot modules
were loaded, and where they can be found. Boot loaders don't have to
support multiple boot modules, but they are strongly encouraged to,
because some operating systems will be unable to boot without them.


File: multiboot.info,  Node: Terminology,  Next: Specification,  Prev: Overview,  Up: Top

2 The definitions of terms used through the specification
*********************************************************

"must"
     We use the term "must", when any boot loader or OS image needs to
     follow a rule -- otherwise, the boot loader or OS image is _not_
     Multiboot-compliant.

     必须

     术语"必须"表示引导程序或OS映像需要服从某一规则，否则的话，引导程序或者OS
     映像就_不_能称为符合Multiboot规范的。

"should"
     We use the term "should", when any boot loader or OS image is
     recommended to follow a rule, but it doesn't need to follow the
     rule.

     应该

     术语"应该"表示引导程序或OS映像最好服从某一规则，但如果没有服从也是可以的。

"may"
     We use the term "may", when any boot loader or OS image is allowed
     to follow a rule.

     可以

     术语"可以"引导程序或OS映像服从某一规则是允许的。

"boot loader"
     Whatever program or set of programs loads the image of the final
     operating system to be run on the machine. The boot loader may
     itself consist of several stages, but that is an implementation
     detail not relevant to this specification. Only the _final_ stage
     of the boot loader -- the stage that eventually transfers control
     to an operating system -- must follow the rules specified in this
     document in order to be "Multiboot-compliant"; earlier boot loader
     stages may be designed in whatever way is most convenient.

     引导程序

     引导程序是负责载入最终的操作系统映像的一个或一组程序。引导程序本身可以由
     几个阶段组成，但是这属于实现细节而同本规范无关。只有引导程序_最后_的
     阶段——最终将控制权转交给操作系统的阶段——必须遵守本文中规定的规则，否则引导
     程序就不能称为符合Multiboot规范；
     在这之前的阶段可以怎么方便怎么设计。

"OS image"
     The initial binary image that a boot loader loads into memory and
     transfers control to start an operating system. The OS image is
     typically an executable containing the operating system kernel.

     OS映像

     OS映像是引导程序载入到内存的初始二进制映像，随后引导程序会将控制权转
     移给它，这样就启动了操作系统。典型的OS映像是包含了操作系统内核的可
     执行文件。

"boot module"
     Other auxiliary files that a boot loader loads into memory along
     with an OS image, but does not interpret in any way other than
     passing their locations to the operating system when it is invoked.

     引导模块

     引导模块是由引导程序同OS映像一同载入的其他起辅助作用的文件。引导程序
     并不理解这些文件，只会将它们的位置告知操作系统。

"Multiboot-compliant"
     A boot loader or an OS image which follows the rules defined as
     "must" is Multiboot-compliant. When this specification specifies a
     rule as "should" or "may", a Multiboot-complaint boot loader/OS
     image doesn't need to follow the rule.

     符合Multiboot规范

     服从所有被标记为"必须"的引导程序或者OS映像被称为符合Multiboot规范。
     对于规范中那些被标记为"应该"或者"可以"的规则，符合Multiboot规范
     的引导程序或OS映像可以不必遵守。

"u8"
     The type of unsigned 8-bit data.

     无符号8位数据。

"u16"
     The type of unsigned 16-bit data. Because the target architecture
     is little-endian, u16 is coded in little-endian.

     无符号16位数据。因为目标架构是高位优先（little-endian）的，所以u16按照高位优先编码。

"u32"
     The type of unsigned 32-bit data. Because the target architecture
     is little-endian, u32 is coded in little-endian.

     无符号32位数据。因为目标架构是高位优先（little-endian）的，所以u32按照高位优先编码。

"u64"
     The type of unsigned 64-bit data. Because the target architecture
     is little-endian, u64 is coded in little-endian.

     无符号64位数据。因为目标架构是高位优先（little-endian）的，所以u64按照高位优先编码。



File: multiboot.info,  Node: Specification,  Next: Examples,  Prev: Terminology,  Up: Top

3 The exact definitions of Multiboot Specification
**************************************************

There are three main aspects of a boot loader/OS image interface:

   引导程序/OS映像接口主要包括三个方面：

  1. The format of an OS image as seen by a boot loader.

     引导程序看到OS映像的格式。

  2. The state of a machine when a boot loader starts an operating
     system.

     当引导程序启动操作系统时机器的状态。

  3. The format of information passed by a boot loader to an operating
     system.

     引导程序传递给操作系统的信息的格式。

* Menu:

* OS image format::
* Machine state::
* Boot information format::


File: multiboot.info,  Node: OS image format,  Next: Machine state,  Up: Specification

3.1 OS image format
===================

An OS image may be an ordinary 32-bit executable file in the standard
format for that particular operating system, except that it may be
linked at a non-default load address to avoid loading on top of the
PC's I/O region or other reserved areas, and of course it should not
use shared libraries or other fancy features.

一个OS映像可以是一个普通的某种操作系统使用的标准格式的32位可执行文件，
不同之处是它可能被链接到一个非默认的载入地址以避开PC的I/O区域或者
其它保留区域，当然它也不能使用共享库或者其它这样可爱的东西。

   An OS image must contain an additional header called "Multiboot
header", besides the headers of the format used by the OS image. The
Multiboot header must be contained completely within the first 8192
bytes of the OS image, and must be longword (32-bit) aligned. In
general, it should come _as early as possible_, and may be embedded in
the beginning of the text segment after the _real_ executable header.

除了OS映像所使用的格式需要的头之外，OS映像还需要额外包括一个"Multiboot头"，
Multiboot头必须完整的包含在OS映像的前8192字节内，并且必须是32位
对齐的。通常来说，它的位置_越靠前越好_，并且可以嵌入在text
段的起始处，位于可执行文件头之后。

* Menu:

* Header layout::               The layout of Multiboot header
* Header magic fields::         The magic fields of Multiboot header
* Header address fields::
* Header graphics fields::


File: multiboot.info,  Node: Header layout,  Next: Header magic fields,  Up: OS image format

3.1.1 The layout of Multiboot header
------------------------------------

The layout of the Multiboot header must be as follows:

   Multiboot的头分布必须如下表所示：

偏移量  类型    域名           备注
0       u32     magic          必须
4       u32     flags          必须
8       u32     checksum       必须
12      u32     header_addr    如果 flags[16] 被置位
16      u32     load_addr      如果 flags[16] 被置位
20      u32     load_end_addr  如果 flags[16] 被置位
24      u32     bss_end_addr   如果 flags[16] 被置位
28      u32     entry_addr     如果 flags[16] 被置位
32      u32     mode_type      如果 flags[2] 被置位
36      u32     width          如果 flags[2] 被置位
40      u32     height         如果 flags[2] 被置位
44      u32     depth          如果 flags[2] 被置位

Offset  Type    Field Name     Note
0       u32     magic          required
4       u32     flags          required
8       u32     checksum       required
12      u32     header_addr    if flags[16] is set
16      u32     load_addr      if flags[16] is set
20      u32     load_end_addr  if flags[16] is set
24      u32     bss_end_addr   if flags[16] is set
28      u32     entry_addr     if flags[16] is set
32      u32     mode_type      if flags[2] is set
36      u32     width          if flags[2] is set
40      u32     height         if flags[2] is set
44      u32     depth          if flags[2] is set

   `magic', `flags' 和 `checksum' 域在*note Header magic fields::中定义,
`header_addr',`load_addr', `load_end_addr', `bss_end_addr' 和
`entry_addr'域在 *note Header address fields::中定义, `mode_type',
`width', `height' 和 `depth' 在 *note Header graphics fields::中定义。

   The fields `magic', `flags' and `checksum' are defined in *note
Header magic fields::, the fields `header_addr', `load_addr',
`load_end_addr', `bss_end_addr' and `entry_addr' are defined in *note
Header address fields::, and the fields `mode_type', `width', `height'
and `depth' are defined in *note Header graphics fields::.


File: multiboot.info,  Node: Header magic fields,  Next: Header address fields,  Prev: Header layout,  Up: OS image format

3.1.2 The magic fields of Multiboot header
------------------------------------------

`magic'
     The field `magic' is the magic number identifying the header,
     which must be the hexadecimal value `0x1BADB002'.

     `magic'域是标志头的魔数，它必须等于十六进制值0x1BADB002。

`flags'
     The field `flags' specifies features that the OS image requests or
     requires of an boot loader. Bits 0-15 indicate requirements; if the
     boot loader sees any of these bits set but doesn't understand the
     flag or can't fulfill the requirements it indicates for some
     reason, it must notify the user and fail to load the OS image.
     Bits 16-31 indicate optional features; if any bits in this range
     are set but the boot loader doesn't understand them, it may simply
     ignore them and proceed as usual. Naturally, all as-yet-undefined
     bits in the `flags' word must be set to zero in OS images. This
     way, the `flags' fields serves for version control as well as
     simple feature selection.

     `flags'域指出OS映像需要引导程序提供或支持的特性。
     0-15位指出需求：如果引导程序发现某些位被设置但出于某种原因不理解或
     不能满足相应的需求，它必须告知用户并宣告引导失败。
     16-31位指出可选的特性：如果引导程序不能支持某些位，它可以简单的忽略它们并正常引导。
     自然，所有`flags'字中尚未定义的位必须被置为0。这样，`flags'域既可以用于版本控制
     也可以用于简单的特性选择。

     If bit 0 in the `flags' word is set, then all boot modules loaded
     along with the operating system must be aligned on page (4KB)
     boundaries. Some operating systems expect to be able to map the
     pages containing boot modules directly into a paged address space
     during startup, and thus need the boot modules to be page-aligned.

     如果设置了`flags'字中的0位，所有的引导模块将按页（4KB）边界对齐。
     有些操作系统能够在启动时将包含引导模块的页直接映射到一个分页的地址空间，
     因此需要引导模块是页对齐的。

     If bit 1 in the `flags' word is set, then information on available
     memory via at least the `mem_*' fields of the Multiboot information
     structure (*note Boot information format::) must be included. If
     the boot loader is capable of passing a memory map (the `mmap_*'
     fields) and one exists, then it may be included as well.

     如果设置了`flags'字中的1位，则必须通过Multiboot信息结构 (*note
     Boot information format::）的`mem_*'域包括可用内存的信息。
     如果引导程序能够传递内存分布（`mmap_*'
     域）并且它确实存在，则也包括它。

     If bit 2 in the `flags' word is set, information about the video
     mode table (*note Boot information format::) must be available to
     the kernel.

     如果设置了flags字中的2位，有关视频模式表（*note Boot information
     format::） 的信息必须对内核可见。

     If bit 16 in the `flags' word is set, then the fields at offsets
     12-28 in the Multiboot header are valid, and the boot loader
     should use them instead of the fields in the actual executable
     header to calculate where to load the OS image. This information
     does not need to be provided if the kernel image is in ELF format,
     but it _must_ be provided if the images is in a.out format or in
     some other format. Compliant boot loaders must be able to load
     images that either are in ELF format or contain the load address
     information embedded in the Multiboot header; they may also
     directly support other executable formats, such as particular
     a.out variants, but are not required to.

     如果设置了 `flags'字中的16位，则Multiboot头中偏移量8-28的域有效，
     引导程序应该使用它们而不是实际可执行头中的域来计算将OS映象载入到的位置。
     如果内核映象为ELF格式则不必提供这样的信息，但是如果映象是a.out格式或者
     其他什么格式的话就_必须_提供这些信息。兼容的引导程序必须既能够载入ELF
     格式的映象也能载入将载入地址信息嵌入Multiboot头中的映象；
     它们也可以直接支持其他的可执行格式，例如一个a.out的特殊变体，但这不是必须的。

`checksum'
     The field `checksum' is a 32-bit unsigned value which, when added
     to the other magic fields (i.e. `magic' and `flags'), must have a
     32-bit unsigned sum of zero.

     域`checksum'是一个32位的无符号值，当与其他的magic域（也就是
     `magic'和`flags'）相加时，结果必须是32位的无符号值0 （即`magic' +
     `flags' + `checksum' = 0）。


File: multiboot.info,  Node: Header address fields,  Next: Header graphics fields,  Prev: Header magic fields,  Up: OS image format

3.1.3 The address fields of Multiboot header
--------------------------------------------

All of the address fields enabled by flag bit 16 are physical addresses.
The meaning of each is as follows:

`header_addr'
     Contains the address corresponding to the beginning of the
     Multiboot header -- the physical memory location at which the
     magic value is supposed to be loaded. This field serves to
     "synchronize" the mapping between OS image offsets and physical
     memory addresses.

`load_addr'
     Contains the physical address of the beginning of the text
     segment. The offset in the OS image file at which to start loading
     is defined by the offset at which the header was found, minus
     (header_addr - load_addr). load_addr must be less than or equal to
     header_addr.

`load_end_addr'
     Contains the physical address of the end of the data segment.
     (load_end_addr - load_addr) specifies how much data to load.  This
     implies that the text and data segments must be consecutive in the
     OS image; this is true for existing a.out executable formats.  If
     this field is zero, the boot loader assumes that the text and data
     segments occupy the whole OS image file.

`bss_end_addr'
     Contains the physical address of the end of the bss segment. The
     boot loader initializes this area to zero, and reserves the memory
     it occupies to avoid placing boot modules and other data relevant
     to the operating system in that area. If this field is zero, the
     boot loader assumes that no bss segment is present.

`entry_addr'
     The physical address to which the boot loader should jump in order
     to start running the operating system.


File: multiboot.info,  Node: Header graphics fields,  Prev: Header address fields,  Up: OS image format

3.1.4 The graphics fields of Multiboot header
---------------------------------------------

All of the graphics fields are enabled by flag bit 2. They specify the
preferred graphics mode. Note that that is only a _recommended_ mode by
the OS image. Boot loader may choose a different mode if it sees fit.

   The meaning of each is as follows:

`mode_type'
     Contains `0' for linear graphics mode or `1' for EGA-standard text
     mode. Everything else is reserved for future expansion. Note that
     the boot loader may set a text mode even if this field contains
     `0', or set a video mode even if this field contains `1'.

`width'
     Contains the number of the columns. This is specified in pixels in
     a graphics mode, and in characters in a text mode. The value zero
     indicates that the OS image has no preference.

`height'
     Contains the number of the lines. This is specified in pixels in a
     graphics mode, and in characters in a text mode. The value zero
     indicates that the OS image has no preference.

`depth'
     Contains the number of bits per pixel in a graphics mode, and zero
     in a text mode. The value zero indicates that the OS image has no
     preference.


File: multiboot.info,  Node: Machine state,  Next: Boot information format,  Prev: OS image format,  Up: Specification

3.2 Machine state
=================

When the boot loader invokes the 32-bit operating system, the machine
must have the following state:

`EAX'
     Must contain the magic value `0x2BADB002'; the presence of this
     value indicates to the operating system that it was loaded by a
     Multiboot-compliant boot loader (e.g. as opposed to another type of
     boot loader that the operating system can also be loaded from).

`EBX'
     Must contain the 32-bit physical address of the Multiboot
     information structure provided by the boot loader (*note Boot
     information format::).

`CS'
     Must be a 32-bit read/execute code segment with an offset of `0'
     and a limit of `0xFFFFFFFF'. The exact value is undefined.

`DS'
`ES'
`FS'
`GS'
`SS'
     Must be a 32-bit read/write data segment with an offset of `0' and
     a limit of `0xFFFFFFFF'. The exact values are all undefined.

`A20 gate'
     Must be enabled.

`CR0'
     Bit 31 (PG) must be cleared. Bit 0 (PE) must be set. Other bits are
     all undefined.

`EFLAGS'
     Bit 17 (VM) must be cleared. Bit 9 (IF) must be cleared. Other bits
     are all undefined.

   All other processor registers and flag bits are undefined. This
includes, in particular:

`ESP'
     The OS image must create its own stack as soon as it needs one.

`GDTR'
     Even though the segment registers are set up as described above,
     the `GDTR' may be invalid, so the OS image must not load any
     segment registers (even just reloading the same values!) until it
     sets up its own `GDT'.

`IDTR'
     The OS image must leave interrupts disabled until it sets up its
     own `IDT'.

   However, other machine state should be left by the boot loader in
"normal working order", i.e. as initialized by the BIOS (or DOS, if
that's what the boot loader runs from). In other words, the operating
system should be able to make BIOS calls and such after being loaded,
as long as it does not overwrite the BIOS data structures before doing
so. Also, the boot loader must leave the PIC programmed with the normal
BIOS/DOS values, even if it changed them during the switch to 32-bit
mode.


File: multiboot.info,  Node: Boot information format,  Prev: Machine state,  Up: Specification

3.3 Boot information format
===========================

FIXME: Split this chapter like the chapter "OS image format".

   Upon entry to the operating system, the `EBX' register contains the
physical address of a "Multiboot information" data structure, through
which the boot loader communicates vital information to the operating
system. The operating system can use or ignore any parts of the
structure as it chooses; all information passed by the boot loader is
advisory only.

   The Multiboot information structure and its related substructures
may be placed anywhere in memory by the boot loader (with the exception
of the memory reserved for the kernel and boot modules, of course). It
is the operating system's responsibility to avoid overwriting this
memory until it is done using it.

   The format of the Multiboot information structure (as defined so far)
follows:

             +-------------------+
     0       | flags             |    (required)
             +-------------------+
     4       | mem_lower         |    (present if flags[0] is set)
     8       | mem_upper         |    (present if flags[0] is set)
             +-------------------+
     12      | boot_device       |    (present if flags[1] is set)
             +-------------------+
     16      | cmdline           |    (present if flags[2] is set)
             +-------------------+
     20      | mods_count        |    (present if flags[3] is set)
     24      | mods_addr         |    (present if flags[3] is set)
             +-------------------+
     28 - 40 | syms              |    (present if flags[4] or
             |                   |                flags[5] is set)
             +-------------------+
     44      | mmap_length       |    (present if flags[6] is set)
     48      | mmap_addr         |    (present if flags[6] is set)
             +-------------------+
     52      | drives_length     |    (present if flags[7] is set)
     56      | drives_addr       |    (present if flags[7] is set)
             +-------------------+
     60      | config_table      |    (present if flags[8] is set)
             +-------------------+
     64      | boot_loader_name  |    (present if flags[9] is set)
             +-------------------+
     68      | apm_table         |    (present if flags[10] is set)
             +-------------------+
     72      | vbe_control_info  |    (present if flags[11] is set)
     76      | vbe_mode_info     |
     80      | vbe_mode          |
     82      | vbe_interface_seg |
     84      | vbe_interface_off |
     86      | vbe_interface_len |
             +-------------------+
     88      | framebuffer_addr  |    (present if flags[12] is set)
     96      | framebuffer_pitch |
     100     | framebuffer_width |
     104     | framebuffer_height|
     108     | framebuffer_bpp   |
     109     | framebuffer_type  |
     110-115 | color_info        |
             +-------------------+

   The first longword indicates the presence and validity of other
fields in the Multiboot information structure. All as-yet-undefined
bits must be set to zero by the boot loader. Any set bits that the
operating system does not understand should be ignored. Thus, the
`flags' field also functions as a version indicator, allowing the
Multiboot information structure to be expanded in the future without
breaking anything.

   If bit 0 in the `flags' word is set, then the `mem_*' fields are
valid. `mem_lower' and `mem_upper' indicate the amount of lower and
upper memory, respectively, in kilobytes. Lower memory starts at
address 0, and upper memory starts at address 1 megabyte. The maximum
possible value for lower memory is 640 kilobytes. The value returned for
upper memory is maximally the address of the first upper memory hole
minus 1 megabyte. It is not guaranteed to be this value.

   If bit 1 in the `flags' word is set, then the `boot_device' field is
valid, and indicates which BIOS disk device the boot loader loaded the
OS image from. If the OS image was not loaded from a BIOS disk, then
this field must not be present (bit 3 must be clear). The operating
system may use this field as a hint for determining its own "root"
device, but is not required to. The `boot_device' field is laid out in
four one-byte subfields as follows:

     +-------+-------+-------+-------+
     | part3 | part2 | part1 | drive |
     +-------+-------+-------+-------+
     Least significant             Most significant

   The most significant byte contains the BIOS drive number as
understood by the BIOS INT 0x13 low-level disk interface: e.g. 0x00 for
the first floppy disk or 0x80 for the first hard disk.

   The three remaining bytes specify the boot partition. `part1'
specifies the "top-level" partition number, `part2' specifies a
"sub-partition" in the top-level partition, etc. Partition numbers
always start from zero. Unused partition bytes must be set to 0xFF. For
example, if the disk is partitioned using a simple one-level DOS
partitioning scheme, then `part1' contains the DOS partition number,
and `part2' and `part3' are both 0xFF. As another example, if a disk is
partitioned first into DOS partitions, and then one of those DOS
partitions is subdivided into several BSD partitions using BSD's
"disklabel" strategy, then `part1' contains the DOS partition number,
`part2' contains the BSD sub-partition within that DOS partition, and
`part3' is 0xFF.

   DOS extended partitions are indicated as partition numbers starting
from 4 and increasing, rather than as nested sub-partitions, even
though the underlying disk layout of extended partitions is
hierarchical in nature. For example, if the boot loader boots from the
second extended partition on a disk partitioned in conventional DOS
style, then `part1' will be 5, and `part2' and `part3' will both be
0xFF.

   If bit 2 of the `flags' longword is set, the `cmdline' field is
valid, and contains the physical address of the command line to be
passed to the kernel. The command line is a normal C-style
zero-terminated string. The exact format of command line is left to OS
developpers. General-purpose boot loaders should allow user a complete
control on command line independently of other factors like image name.
Boot loaders with specific payload in mind may completely or partially
generate it algorithmically.

   If bit 3 of the `flags' is set, then the `mods' fields indicate to
the kernel what boot modules were loaded along with the kernel image,
and where they can be found. `mods_count' contains the number of
modules loaded; `mods_addr' contains the physical address of the first
module structure. `mods_count' may be zero, indicating no boot modules
were loaded, even if bit 3 of `flags' is set. Each module structure is
formatted as follows:

             +-------------------+
     0       | mod_start         |
     4       | mod_end           |
             +-------------------+
     8       | string            |
             +-------------------+
     12      | reserved (0)      |
             +-------------------+

   The first two fields contain the start and end addresses of the boot
module itself. The `string' field provides an arbitrary string to be
associated with that particular boot module; it is a zero-terminated
ASCII string, just like the kernel command line. The `string' field may
be 0 if there is no string associated with the module. Typically the
string might be a command line (e.g. if the operating system treats boot
modules as executable programs), or a pathname (e.g. if the operating
system treats boot modules as files in a file system), but its exact use
is specific to the operating system. The `reserved' field must be set
to 0 by the boot loader and ignored by the operating system.

   *Caution:* Bits 4 & 5 are mutually exclusive.

   If bit 4 in the `flags' word is set, then the following fields in
the Multiboot information structure starting at byte 28 are valid:

             +-------------------+
     28      | tabsize           |
     32      | strsize           |
     36      | addr              |
     40      | reserved (0)      |
             +-------------------+

   These indicate where the symbol table from an a.out kernel image can
be found. `addr' is the physical address of the size (4-byte unsigned
long) of an array of a.out format "nlist" structures, followed
immediately by the array itself, then the size (4-byte unsigned long) of
a set of zero-terminated ASCII strings (plus sizeof(unsigned long) in
this case), and finally the set of strings itself. `tabsize' is equal
to its size parameter (found at the beginning of the symbol section),
and `strsize' is equal to its size parameter (found at the beginning of
the string section) of the following string table to which the symbol
table refers. Note that `tabsize' may be 0, indicating no symbols, even
if bit 4 in the `flags' word is set.

   If bit 5 in the `flags' word is set, then the following fields in
the Multiboot information structure starting at byte 28 are valid:

             +-------------------+
     28      | num               |
     32      | size              |
     36      | addr              |
     40      | shndx             |
             +-------------------+

   These indicate where the section header table from an ELF kernel is,
the size of each entry, number of entries, and the string table used as
the index of names. They correspond to the `shdr_*' entries
(`shdr_num', etc.) in the Executable and Linkable Format (ELF)
specification in the program header. All sections are loaded, and the
physical address fields of the ELF section header then refer to where
the sections are in memory (refer to the i386 ELF documentation for
details as to how to read the section header(s)). Note that `shdr_num'
may be 0, indicating no symbols, even if bit 5 in the `flags' word is
set.

   If bit 6 in the `flags' word is set, then the `mmap_*' fields are
valid, and indicate the address and length of a buffer containing a
memory map of the machine provided by the BIOS. `mmap_addr' is the
address, and `mmap_length' is the total size of the buffer. The buffer
consists of one or more of the following size/structure pairs (`size'
is really used for skipping to the next pair):

             +-------------------+
     -4      | size              |
             +-------------------+
     0       | base_addr         |
     8       | length            |
     16      | type              |
             +-------------------+

   where `size' is the size of the associated structure in bytes, which
can be greater than the minimum of 20 bytes. `base_addr' is the
starting address. `length' is the size of the memory region in bytes.
`type' is the variety of address range represented, where a value of 1
indicates available RAM, value of 3 indicates usable memory holding
ACPI information, value of 4 indicates reserved memory which needs to
be preserved on hibernation, value of 5 indicates a memory which is
occupied by defective RAM modules and all other values currently
indicated a reserved area.

   The map provided is guaranteed to list all standard RAM that should
be available for normal use.

   If bit 7 in the `flags' is set, then the `drives_*' fields are
valid, and indicate the address of the physical address of the first
drive structure and the size of drive structures. `drives_addr' is the
address, and `drives_length' is the total size of drive structures.
Note that `drives_length' may be zero. Each drive structure is
formatted as follows:

             +-------------------+
     0       | size              |
             +-------------------+
     4       | drive_number      |
             +-------------------+
     5       | drive_mode        |
             +-------------------+
     6       | drive_cylinders   |
     8       | drive_heads       |
     9       | drive_sectors     |
             +-------------------+
     10 - xx | drive_ports       |
             +-------------------+

   The `size' field specifies the size of this structure. The size
varies, depending on the number of ports. Note that the size may not be
equal to (10 + 2 * the number of ports), because of an alignment.

   The `drive_number' field contains the BIOS drive number. The
`drive_mode' field represents the access mode used by the boot loader.
Currently, the following modes are defined:

`0'
     CHS mode (traditional cylinder/head/sector addressing mode).

`1'
     LBA mode (Logical Block Addressing mode).

   The three fields, `drive_cylinders', `drive_heads' and
`drive_sectors', indicate the geometry of the drive detected by the
BIOS. `drive_cylinders' contains the number of the cylinders.
`drive_heads' contains the number of the heads. `drive_sectors'
contains the number of the sectors per track.

   The `drive_ports' field contains the array of the I/O ports used for
the drive in the BIOS code. The array consists of zero or more unsigned
two-bytes integers, and is terminated with zero. Note that the array
may contain any number of I/O ports that are not related to the drive
actually (such as DMA controller's ports).

   If bit 8 in the `flags' is set, then the `config_table' field is
valid, and indicates the address of the ROM configuration table
returned by the "GET CONFIGURATION" BIOS call. If the BIOS call fails,
then the size of the table must be _zero_.

   If bit 9 in the `flags' is set, the `boot_loader_name' field is
valid, and contains the physical address of the name of a boot loader
booting the kernel. The name is a normal C-style zero-terminated string.

   If bit 10 in the `flags' is set, the `apm_table' field is valid, and
contains the physical address of an APM table defined as below:

             +----------------------+
     0       | version              |
     2       | cseg                 |
     4       | offset               |
     8       | cseg_16              |
     10      | dseg                 |
     12      | flags                |
     14      | cseg_len             |
     16      | cseg_16_len          |
     18      | dseg_len             |
             +----------------------+

   The fields `version', `cseg', `offset', `cseg_16', `dseg', `flags',
`cseg_len', `cseg_16_len', `dseg_len' indicate the version number, the
protected mode 32-bit code segment, the offset of the entry point, the
protected mode 16-bit code segment, the protected mode 16-bit data
segment, the flags, the length of the protected mode 32-bit code
segment, the length of the protected mode 16-bit code segment, and the
length of the protected mode 16-bit data segment, respectively. Only
the field `offset' is 4 bytes, and the others are 2 bytes. See Advanced
Power Management (APM) BIOS Interface Specification
(http://www.microsoft.com/hwdev/busbios/amp_12.htm), for more
information.

   If bit 11 in the `flags' is set, the VBE table is available.

   The fields `vbe_control_info' and `vbe_mode_info' contain the
physical addresses of VBE control information returned by the VBE
Function 00h and VBE mode information returned by the VBE Function 01h,
respectively.

   The field `vbe_mode' indicates current video mode in the format
specified in VBE 3.0.

   The rest fields `vbe_interface_seg', `vbe_interface_off', and
`vbe_interface_len' contain the table of a protected mode interface
defined in VBE 2.0+. If this information is not available, those fields
contain zero. Note that VBE 3.0 defines another protected mode
interface which is incompatible with the old one. If you want to use
the new protected mode interface, you will have to find the table
yourself.

   The fields for the graphics table are designed for VBE, but
Multiboot boot loaders may simulate VBE on non-VBE modes, as if they
were VBE modes.

   If bit 12 in the `flags' is set, the FRAMEBUFFER table is available.

   The field `framebuffer_addr' contains framebuffer physical address.
This field is 64-bit wide but bootloader "should" set it under 4 GiB if
possible for compatibility with kernels which aren't aware of PAE or
AMD64. The field `framebuffer_pitch' contains the framebuffer pitch in
bytes. The fields `framebuffer_width', `framebuffer_height' contain the
framebuffer dimensions in pixels. The field `framebuffer_bpp' contains
the number of bits per pixel. If `framebuffer_type' is set to `0' it
means indexed color will be used. In this case color_info is defined as
follows:
             +----------------------------------+
     110     | framebuffer_palette_addr         |
     114     | framebuffer_palette_num_colors   |
             +----------------------------------+
`framebuffer_palette_addr' contains the address of the color palette,
which is an array of color descriptors. Each color descriptor has the
following structure:
             +-------------+
     0       | red_value   |
     1       | green_value |
     2       | blue_value  |
             +-------------+
If `framebuffer_type' is set to `1' it means direct RGB color will be
used. Then color_type is defined as follows:

             +----------------------------------+
     110     | framebuffer_red_field_position   |
     111     | framebuffer_red_mask_size        |
     112     | framebuffer_green_field_position |
     113     | framebuffer_green_mask_size      |
     114     | framebuffer_blue_field_position  |
     115     | framebuffer_blue_mask_size       |
             +----------------------------------+

   If `framebuffer_type' is set to `2' it means EGA-standard text mode
will be used. In this case `framebuffer_width' and `framebuffer_height'
are expressed in characters instead of pixels.  `framebuffer_bpp' is
equal to 16 (bits per character) and `framebuffer_pitch' is expressed
in bytes per text line.  All further values of `framebuffer_type' are
reserved for future expansion.


File: multiboot.info,  Node: Examples,  Next: History,  Prev: Specification,  Up: Top

4 Examples
**********

*Caution:* The following items are not part of the specification
document, but are included for prospective operating system and boot
loader writers.

* Menu:

* Notes on PC::
* BIOS device mapping techniques::
* Example OS code::
* Example boot loader code::


File: multiboot.info,  Node: Notes on PC,  Next: BIOS device mapping techniques,  Up: Examples

4.1 Notes on PC
===============

In reference to bit 0 of the `flags' parameter in the Multiboot
information structure, if the bootloader in question uses older BIOS
interfaces, or the newest ones are not available (see description about
bit 6), then a maximum of either 15 or 63 megabytes of memory may be
reported. It is _highly_ recommended that boot loaders perform a
thorough memory probe.

   In reference to bit 1 of the `flags' parameter in the Multiboot
information structure, it is recognized that determination of which
BIOS drive maps to which device driver in an operating system is
non-trivial, at best. Many kludges have been made to various operating
systems instead of solving this problem, most of them breaking under
many conditions. To encourage the use of general-purpose solutions to
this problem, there are 2 BIOS device mapping techniques (*note BIOS
device mapping techniques::).

   In reference to bit 6 of the `flags' parameter in the Multiboot
information structure, it is important to note that the data structure
used there (starting with `BaseAddrLow') is the data returned by the
INT 15h, AX=E820h -- Query System Address Map call. See *Note Query
System Address Map: (grub.info)Query System Address Map, for more
information. The interface here is meant to allow a boot loader to work
unmodified with any reasonable extensions of the BIOS interface,
passing along any extra data to be interpreted by the operating system
as desired.


File: multiboot.info,  Node: BIOS device mapping techniques,  Next: Example OS code,  Prev: Notes on PC,  Up: Examples

4.2 BIOS device mapping techniques
==================================

Both of these techniques should be usable from any PC operating system,
and neither require any special support in the drivers themselves. This
section will be flushed out into detailed explanations, particularly for
the I/O restriction technique.

   The general rule is that the data comparison technique is the quick
and dirty solution. It works most of the time, but doesn't cover all the
bases, and is relatively simple.

   The I/O restriction technique is much more complex, but it has
potential to solve the problem under all conditions, plus allow access
of the remaining BIOS devices when not all of them have operating system
drivers.

* Menu:

* Data comparison technique::
* I/O restriction technique::


File: multiboot.info,  Node: Data comparison technique,  Next: I/O restriction technique,  Up: BIOS device mapping techniques

4.2.1 Data comparison technique
-------------------------------

Before activating _any_ of the device drivers, gather enough data from
similar sectors on each of the disks such that each one can be uniquely
identified.

   After activating the device drivers, compare data from the drives
using the operating system drivers. This should hopefully be sufficient
to provide such a mapping.

   Problems:

  1. The data on some BIOS devices might be identical (so the part
     reading the drives from the BIOS should have some mechanism to give
     up).

  2. There might be extra drives not accessible from the BIOS which are
     identical to some drive used by the BIOS (so it should be capable
     of giving up there as well).


File: multiboot.info,  Node: I/O restriction technique,  Prev: Data comparison technique,  Up: BIOS device mapping techniques

4.2.2 I/O restriction technique
-------------------------------

This first step may be unnecessary, but first create copy-on-write
mappings for the device drivers writing into PC RAM. Keep the original
copies for the "clean BIOS virtual machine" to be created later.

   For each device driver brought online, determine which BIOS devices
become inaccessible by:

  1. Create a "clean BIOS virtual machine".

  2. Set the I/O permission map for the I/O area claimed by the device
     driver to no permissions (neither read nor write).

  3. Access each device.

  4. Record which devices succeed, and those which try to access the
     "restricted" I/O areas (hopefully, this will be an "xor"
     situation).

   For each device driver, given how many of the BIOS devices were
subsumed by it (there should be no gaps in this list), it should be easy
to determine which devices on the controller these are.

   In general, you have at most 2 disks from each controller given BIOS
numbers, but they pretty much always count from the lowest logically
numbered devices on the controller.


File: multiboot.info,  Node: Example OS code,  Next: Example boot loader code,  Prev: BIOS device mapping techniques,  Up: Examples

4.3 Example OS code
===================

In this distribution, the example Multiboot kernel `kernel' is
included. The kernel just prints out the Multiboot information structure
on the screen, so you can make use of the kernel to test a
Multiboot-compliant boot loader and for reference to how to implement a
Multiboot kernel. The source files can be found under the directory
`doc' in the Multiboot source distribution.

   The kernel `kernel' consists of only three files: `boot.S',
`kernel.c' and `multiboot.h'. The assembly source `boot.S' is written
in GAS (*note GNU assembler: (as.info)Top.), and contains the Multiboot
information structure to comply with the specification. When a
Multiboot-compliant boot loader loads and execute it, it initialize the
stack pointer and `EFLAGS', and then call the function `cmain' defined
in `kernel.c'. If `cmain' returns to the callee, then it shows a
message to inform the user of the halt state and stops forever until
you push the reset key. The file `kernel.c' contains the function
`cmain', which checks if the magic number passed by the boot loader is
valid and so on, and some functions to print messages on the screen.
The file `multiboot.h' defines some macros, such as the magic number
for the Multiboot header, the Multiboot header structure and the
Multiboot information structure.

* Menu:

* multiboot.h::
* boot.S::
* kernel.c::
* Other Multiboot kernels::


File: multiboot.info,  Node: multiboot.h,  Next: boot.S,  Up: Example OS code

4.3.1 multiboot.h
-----------------

This is the source code in the file `multiboot.h':

     /* multiboot.h - Multiboot header file. */
     /* Copyright (C) 1999,2003,2007,2008,2009,2010  Free Software Foundation, Inc.
      *
      *  Permission is hereby granted, free of charge, to any person obtaining a copy
      *  of this software and associated documentation files (the "Software"), to
      *  deal in the Software without restriction, including without limitation the
      *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
      *  sell copies of the Software, and to permit persons to whom the Software is
      *  furnished to do so, subject to the following conditions:
      *
      *  The above copyright notice and this permission notice shall be included in
      *  all copies or substantial portions of the Software.
      *
      *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL ANY
      *  DEVELOPER OR DISTRIBUTOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
      *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
      *  IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
      */

     #ifndef MULTIBOOT_HEADER
     #define MULTIBOOT_HEADER 1

     /* How many bytes from the start of the file we search for the header. */
     /* 在文件的前多少字节内寻找Multiboot头 */
     #define MULTIBOOT_SEARCH                        8192
     #define MULTIBOOT_HEADER_ALIGN                  4

     /* The magic field should contain this. */
     #define MULTIBOOT_HEADER_MAGIC                  0x1BADB002

     /* This should be in %eax. */
     #define MULTIBOOT_BOOTLOADER_MAGIC              0x2BADB002

     /* Alignment of multiboot modules. */
     #define MULTIBOOT_MOD_ALIGN                     0x00001000

     /* Alignment of the multiboot info structure. */
     #define MULTIBOOT_INFO_ALIGN                    0x00000004

     /* Flags set in the 'flags' member of the multiboot header. */

     /* Align all boot modules on i386 page (4KB) boundaries. */
     #define MULTIBOOT_PAGE_ALIGN                    0x00000001

     /* Must pass memory information to OS. */
     #define MULTIBOOT_MEMORY_INFO                   0x00000002

     /* Must pass video information to OS. */
     #define MULTIBOOT_VIDEO_MODE                    0x00000004

     /* This flag indicates the use of the address fields in the header. */
     #define MULTIBOOT_AOUT_KLUDGE                   0x00010000

     /* Flags to be set in the 'flags' member of the multiboot info structure. */

     /* is there basic lower/upper memory information? */
     #define MULTIBOOT_INFO_MEMORY                   0x00000001
     /* is there a boot device set? */
     #define MULTIBOOT_INFO_BOOTDEV                  0x00000002
     /* is the command-line defined? */
     #define MULTIBOOT_INFO_CMDLINE                  0x00000004
     /* are there modules to do something with? */
     #define MULTIBOOT_INFO_MODS                     0x00000008

     /* These next two are mutually exclusive */

     /* is there a symbol table loaded? */
     #define MULTIBOOT_INFO_AOUT_SYMS                0x00000010
     /* is there an ELF section header table? */
     #define MULTIBOOT_INFO_ELF_SHDR                 0X00000020

     /* is there a full memory map? */
     #define MULTIBOOT_INFO_MEM_MAP                  0x00000040

     /* Is there drive info? */
     #define MULTIBOOT_INFO_DRIVE_INFO               0x00000080

     /* Is there a config table? */
     #define MULTIBOOT_INFO_CONFIG_TABLE             0x00000100

     /* Is there a boot loader name? */
     #define MULTIBOOT_INFO_BOOT_LOADER_NAME         0x00000200

     /* Is there a APM table? */
     #define MULTIBOOT_INFO_APM_TABLE                0x00000400

     /* Is there video information? */
     #define MULTIBOOT_INFO_VBE_INFO                 0x00000800
     #define MULTIBOOT_INFO_FRAMEBUFFER_INFO         0x00001000

     #ifndef ASM_FILE

     typedef unsigned char           multiboot_uint8_t;
     typedef unsigned short          multiboot_uint16_t;
     typedef unsigned int            multiboot_uint32_t;
     typedef unsigned long long      multiboot_uint64_t;

     struct multiboot_header
     {
       /* Must be MULTIBOOT_MAGIC - see above. */
       multiboot_uint32_t magic;

       /* Feature flags. */
       multiboot_uint32_t flags;

       /* The above fields plus this one must equal 0 mod 2^32. */
       multiboot_uint32_t checksum;

       /* These are only valid if MULTIBOOT_AOUT_KLUDGE is set. */
       multiboot_uint32_t header_addr;
       multiboot_uint32_t load_addr;
       multiboot_uint32_t load_end_addr;
       multiboot_uint32_t bss_end_addr;
       multiboot_uint32_t entry_addr;

       /* These are only valid if MULTIBOOT_VIDEO_MODE is set. */
       multiboot_uint32_t mode_type;
       multiboot_uint32_t width;
       multiboot_uint32_t height;
       multiboot_uint32_t depth;
     };

     /* The symbol table for a.out. */
     struct multiboot_aout_symbol_table
     {
       multiboot_uint32_t tabsize;
       multiboot_uint32_t strsize;
       multiboot_uint32_t addr;
       multiboot_uint32_t reserved;
     };
     typedef struct multiboot_aout_symbol_table multiboot_aout_symbol_table_t;

     /* The section header table for ELF. */
     struct multiboot_elf_section_header_table
     {
       multiboot_uint32_t num;
       multiboot_uint32_t size;
       multiboot_uint32_t addr;
       multiboot_uint32_t shndx;
     };
     typedef struct multiboot_elf_section_header_table multiboot_elf_section_header_table_t;

     struct multiboot_info
     {
       /* Multiboot info version number */
       multiboot_uint32_t flags;

       /* Available memory from BIOS */
       multiboot_uint32_t mem_lower;
       multiboot_uint32_t mem_upper;

       /* "root" partition */
       multiboot_uint32_t boot_device;

       /* Kernel command line */
       multiboot_uint32_t cmdline;

       /* Boot-Module list */
       multiboot_uint32_t mods_count;
       multiboot_uint32_t mods_addr;

       union
       {
         multiboot_aout_symbol_table_t aout_sym;
         multiboot_elf_section_header_table_t elf_sec;
       } u;

       /* Memory Mapping buffer */
       multiboot_uint32_t mmap_length;
       multiboot_uint32_t mmap_addr;

       /* Drive Info buffer */
       multiboot_uint32_t drives_length;
       multiboot_uint32_t drives_addr;

       /* ROM configuration table */
       multiboot_uint32_t config_table;

       /* Boot Loader Name */
       multiboot_uint32_t boot_loader_name;

       /* APM table */
       multiboot_uint32_t apm_table;

       /* Video */
       multiboot_uint32_t vbe_control_info;
       multiboot_uint32_t vbe_mode_info;
       multiboot_uint16_t vbe_mode;
       multiboot_uint16_t vbe_interface_seg;
       multiboot_uint16_t vbe_interface_off;
       multiboot_uint16_t vbe_interface_len;

       multiboot_uint64_t framebuffer_addr;
       multiboot_uint32_t framebuffer_pitch;
       multiboot_uint32_t framebuffer_width;
       multiboot_uint32_t framebuffer_height;
       multiboot_uint8_t framebuffer_bpp;
     #define MULTIBOOT_FRAMEBUFFER_TYPE_INDEXED 0
     #define MULTIBOOT_FRAMEBUFFER_TYPE_RGB     1
     #define MULTIBOOT_FRAMEBUFFER_TYPE_EGA_TEXT     2
       multiboot_uint8_t framebuffer_type;
       union
       {
         struct
         {
           multiboot_uint32_t framebuffer_palette_addr;
           multiboot_uint16_t framebuffer_palette_num_colors;
         };
         struct
         {
           multiboot_uint8_t framebuffer_red_field_position;
           multiboot_uint8_t framebuffer_red_mask_size;
           multiboot_uint8_t framebuffer_green_field_position;
           multiboot_uint8_t framebuffer_green_mask_size;
           multiboot_uint8_t framebuffer_blue_field_position;
           multiboot_uint8_t framebuffer_blue_mask_size;
         };
       };
     };
     typedef struct multiboot_info multiboot_info_t;

     struct multiboot_color
     {
       multiboot_uint8_t red;
       multiboot_uint8_t green;
       multiboot_uint8_t blue;
     };

     struct multiboot_mmap_entry
     {
       multiboot_uint32_t size;
       multiboot_uint64_t addr;
       multiboot_uint64_t len;
     #define MULTIBOOT_MEMORY_AVAILABLE              1
     #define MULTIBOOT_MEMORY_RESERVED               2
     #define MULTIBOOT_MEMORY_ACPI_RECLAIMABLE       3
     #define MULTIBOOT_MEMORY_NVS                    4
     #define MULTIBOOT_MEMORY_BADRAM                 5
       multiboot_uint32_t type;
     } __attribute__((packed));
     typedef struct multiboot_mmap_entry multiboot_memory_map_t;

     struct multiboot_mod_list
     {
       /* the memory used goes from bytes 'mod_start' to 'mod_end-1' inclusive */
       multiboot_uint32_t mod_start;
       multiboot_uint32_t mod_end;

       /* Module command line */
       multiboot_uint32_t cmdline;

       /* padding to take it to 16 bytes (must be zero) */
       multiboot_uint32_t pad;
     };
     typedef struct multiboot_mod_list multiboot_module_t;

     /* APM BIOS info. */
     struct multiboot_apm_info
     {
       multiboot_uint16_t version;
       multiboot_uint16_t cseg;
       multiboot_uint32_t offset;
       multiboot_uint16_t cseg_16;
       multiboot_uint16_t dseg;
       multiboot_uint16_t flags;
       multiboot_uint16_t cseg_len;
       multiboot_uint16_t cseg_16_len;
       multiboot_uint16_t dseg_len;
     };

     #endif /* ! ASM_FILE */

     #endif /* ! MULTIBOOT_HEADER */


File: multiboot.info,  Node: boot.S,  Next: kernel.c,  Prev: multiboot.h,  Up: Example OS code

4.3.2 boot.S
------------

In the file `boot.S':

     /* boot.S - bootstrap the kernel */
     /* Copyright (C) 1999, 2001, 2010  Free Software Foundation, Inc.
      *
      * This program is free software: you can redistribute it and/or modify
      * it under the terms of the GNU General Public License as published by
      * the Free Software Foundation, either version 3 of the License, or
      * (at your option) any later version.
      *
      * This program is distributed in the hope that it will be useful,
      * but WITHOUT ANY WARRANTY; without even the implied warranty of
      * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      * GNU General Public License for more details.
      *
      * You should have received a copy of the GNU General Public License
      * along with this program.  If not, see <http://www.gnu.org/licenses/>.
      */

     #define ASM_FILE        1
     #include <multiboot.h>

     /* C symbol format. HAVE_ASM_USCORE is defined by configure. */
     #ifdef HAVE_ASM_USCORE
     # define EXT_C(sym)                     _ ## sym
     #else
     # define EXT_C(sym)                     sym
     #endif

     /* The size of our stack (16KB). */
     #define STACK_SIZE                      0x4000

     /* The flags for the Multiboot header. */
     #ifdef __ELF__
     # define AOUT_KLUDGE 0
     #else
     # define AOUT_KLUDGE MULTIBOOT_AOUT_KLUDGE
     #endif
     #define MULTIBOOT_HEADER_FLAGS                  MULTIBOOT_PAGE_ALIGN | MULTIBOOT_MEMORY_INFO | MULTIBOOT_VIDEO_MODE | AOUT_KLUDGE

             .text

             .globl  start, _start
     start:
     _start:
             jmp     multiboot_entry

             /* Align 32 bits boundary. */
             .align  4

             /* Multiboot header. */
     multiboot_header:
             /* magic */
             .long   MULTIBOOT_HEADER_MAGIC
             /* flags */
             .long   MULTIBOOT_HEADER_FLAGS
             /* checksum */
             .long   -(MULTIBOOT_HEADER_MAGIC + MULTIBOOT_HEADER_FLAGS)
     #ifndef __ELF__
             /* header_addr */
             .long   multiboot_header
             /* load_addr */
             .long   _start
             /* load_end_addr */
             .long   _edata
             /* bss_end_addr */
             .long   _end
             /* entry_addr */
             .long   multiboot_entry
     #else /* ! __ELF__ */
             .long   0
             .long   0
             .long   0
             .long   0
             .long   0
     #endif /* __ELF__ */
             .long 0
             .long 1024
             .long 768
             .long 32

     multiboot_entry:
             /* Initialize the stack pointer. */
             movl    $(stack + STACK_SIZE), %esp

             /* Reset EFLAGS. */
             pushl   $0
             popf

             /* Push the pointer to the Multiboot information structure. */
             pushl   %ebx
             /* Push the magic value. */
             pushl   %eax

             /* Now enter the C main function... */
             call    EXT_C(cmain)

             /* Halt. */
             pushl   $halt_message
             call    EXT_C(printf)

     loop:   hlt
             jmp     loop

     halt_message:
             .asciz  "Halted."

             /* Our stack area. */
             .comm   stack, STACK_SIZE


File: multiboot.info,  Node: kernel.c,  Next: Other Multiboot kernels,  Prev: boot.S,  Up: Example OS code

4.3.3 kernel.c
--------------

And, in the file `kernel.c':

     /* kernel.c - the C part of the kernel */
     /* Copyright (C) 1999, 2010  Free Software Foundation, Inc.
      *
      * This program is free software: you can redistribute it and/or modify
      * it under the terms of the GNU General Public License as published by
      * the Free Software Foundation, either version 3 of the License, or
      * (at your option) any later version.
      *
      * This program is distributed in the hope that it will be useful,
      * but WITHOUT ANY WARRANTY; without even the implied warranty of
      * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      * GNU General Public License for more details.
      *
      * You should have received a copy of the GNU General Public License
      * along with this program.  If not, see <http://www.gnu.org/licenses/>.
      */

     #include <multiboot.h>

     /* Macros. */

     /* Check if the bit BIT in FLAGS is set. */
     #define CHECK_FLAG(flags,bit)   ((flags) & (1 << (bit)))

     /* Some screen stuff. */
     /* The number of columns. */
     #define COLUMNS                 80
     /* The number of lines. */
     #define LINES                   24
     /* The attribute of an character. */
     #define ATTRIBUTE               7
     /* The video memory address. */
     #define VIDEO                   0xB8000

     /* Variables. */
     /* Save the X position. */
     static int xpos;
     /* Save the Y position. */
     static int ypos;
     /* Point to the video memory. */
     static volatile unsigned char *video;

     /* Forward declarations. */
     void cmain (unsigned long magic, unsigned long addr);
     static void cls (void);
     static void itoa (char *buf, int base, int d);
     static void putchar (int c);
     void printf (const char *format, ...);

     /* Check if MAGIC is valid and print the Multiboot information structure
        pointed by ADDR. */
     void
     cmain (unsigned long magic, unsigned long addr)
     {
       multiboot_info_t *mbi;

       /* Clear the screen. */
       /* 清空屏幕 */
       cls ();

       /* Am I booted by a Multiboot-compliant boot loader? */
       if (magic != MULTIBOOT_BOOTLOADER_MAGIC)
         {
           printf ("Invalid magic number: 0x%x\n", (unsigned) magic);
           return;
         }

       /* Set MBI to the address of the Multiboot information structure. */
       mbi = (multiboot_info_t *) addr;

       /* Print out the flags. */
       printf ("flags = 0x%x\n", (unsigned) mbi->flags);

       /* Are mem_* valid? */
       if (CHECK_FLAG (mbi->flags, 0))
         printf ("mem_lower = %uKB, mem_upper = %uKB\n",
                 (unsigned) mbi->mem_lower, (unsigned) mbi->mem_upper);

       /* Is boot_device valid? */
       if (CHECK_FLAG (mbi->flags, 1))
         printf ("boot_device = 0x%x\n", (unsigned) mbi->boot_device);

       /* Is the command line passed? */
       if (CHECK_FLAG (mbi->flags, 2))
         printf ("cmdline = %s\n", (char *) mbi->cmdline);

       /* Are mods_* valid? */
       if (CHECK_FLAG (mbi->flags, 3))
         {
           multiboot_module_t *mod;
           int i;

           printf ("mods_count = %d, mods_addr = 0x%x\n",
                   (int) mbi->mods_count, (int) mbi->mods_addr);
           for (i = 0, mod = (multiboot_module_t *) mbi->mods_addr;
                i < mbi->mods_count;
                i++, mod++)
             printf (" mod_start = 0x%x, mod_end = 0x%x, cmdline = %s\n",
                     (unsigned) mod->mod_start,
                     (unsigned) mod->mod_end,
                     (char *) mod->cmdline);
         }

       /* Bits 4 and 5 are mutually exclusive! */
       if (CHECK_FLAG (mbi->flags, 4) && CHECK_FLAG (mbi->flags, 5))
         {
           printf ("Both bits 4 and 5 are set.\n");
           return;
         }

       /* Is the symbol table of a.out valid? */
       if (CHECK_FLAG (mbi->flags, 4))
         {
           multiboot_aout_symbol_table_t *multiboot_aout_sym = &(mbi->u.aout_sym);

           printf ("multiboot_aout_symbol_table: tabsize = 0x%0x, "
                   "strsize = 0x%x, addr = 0x%x\n",
                   (unsigned) multiboot_aout_sym->tabsize,
                   (unsigned) multiboot_aout_sym->strsize,
                   (unsigned) multiboot_aout_sym->addr);
         }

       /* Is the section header table of ELF valid? */
       if (CHECK_FLAG (mbi->flags, 5))
         {
           multiboot_elf_section_header_table_t *multiboot_elf_sec = &(mbi->u.elf_sec);

           printf ("multiboot_elf_sec: num = %u, size = 0x%x,"
                   " addr = 0x%x, shndx = 0x%x\n",
                   (unsigned) multiboot_elf_sec->num, (unsigned) multiboot_elf_sec->size,
                   (unsigned) multiboot_elf_sec->addr, (unsigned) multiboot_elf_sec->shndx);
         }

       /* Are mmap_* valid? */
       if (CHECK_FLAG (mbi->flags, 6))
         {
           multiboot_memory_map_t *mmap;

           printf ("mmap_addr = 0x%x, mmap_length = 0x%x\n",
                   (unsigned) mbi->mmap_addr, (unsigned) mbi->mmap_length);
           for (mmap = (multiboot_memory_map_t *) mbi->mmap_addr;
                (unsigned long) mmap < mbi->mmap_addr + mbi->mmap_length;
                mmap = (multiboot_memory_map_t *) ((unsigned long) mmap
                                         + mmap->size + sizeof (mmap->size)))
             printf (" size = 0x%x, base_addr = 0x%x%08x,"
                     " length = 0x%x%08x, type = 0x%x\n",
                     (unsigned) mmap->size,
                     (unsigned) (mmap->addr >> 32),
                     (unsigned) (mmap->addr & 0xffffffff),
                     (unsigned) (mmap->len >> 32),
                     (unsigned) (mmap->len & 0xffffffff),
                     (unsigned) mmap->type);
         }

       /* Draw diagonal blue line. */
       if (CHECK_FLAG (mbi->flags, 12))
         {
           multiboot_uint32_t color;
           unsigned i;
           void *fb = (void *) (unsigned long) mbi->framebuffer_addr;

           switch (mbi->framebuffer_type)
             {
             case MULTIBOOT_FRAMEBUFFER_TYPE_INDEXED:
               {
                 unsigned best_distance, distance;
                 struct multiboot_color *palette;

                 palette = (struct multiboot_color *) mbi->framebuffer_palette_addr;

                 color = 0;
                 best_distance = 4*256*256;

                 for (i = 0; i < mbi->framebuffer_palette_num_colors; i++)
                   {
                     distance = (0xff - palette[i].blue) * (0xff - palette[i].blue)
                       + palette[i].red * palette[i].red
                       + palette[i].green * palette[i].green;
                     if (distance < best_distance)
                       {
                         color = i;
                         best_distance = distance;
                       }
                   }
               }
               break;

             case MULTIBOOT_FRAMEBUFFER_TYPE_RGB:
               color = ((1 << mbi->framebuffer_blue_mask_size) - 1)
                 << mbi->framebuffer_blue_field_position;
               break;

             case MULTIBOOT_FRAMEBUFFER_TYPE_EGA_TEXT:
               color = '\\' | 0x0100;
               break;

             default:
               color = 0xffffffff;
               break;
             }
           for (i = 0; i < mbi->framebuffer_width
                  && i < mbi->framebuffer_height; i++)
             {
               switch (mbi->framebuffer_bpp)
                 {
                 case 8:
                   {
                     multiboot_uint8_t *pixel = fb + mbi->framebuffer_pitch * i + i;
                     *pixel = color;
                   }
                   break;
                 case 15:
                 case 16:
                   {
                     multiboot_uint16_t *pixel
                       = fb + mbi->framebuffer_pitch * i + 2 * i;
                     *pixel = color;
                   }
                   break;
                 case 24:
                   {
                     multiboot_uint32_t *pixel
                       = fb + mbi->framebuffer_pitch * i + 3 * i;
                     *pixel = (color & 0xffffff) | (*pixel & 0xff000000);
                   }
                   break;

                 case 32:
                   {
                     multiboot_uint32_t *pixel
                       = fb + mbi->framebuffer_pitch * i + 4 * i;
                     *pixel = color;
                   }
                   break;
                 }
             }
         }

     }

     /* Clear the screen and initialize VIDEO, XPOS and YPOS. */
     /* 清空屏幕，并初始化VIDEO， XPOS 和 YPOS */
     static void
     cls (void)
     {
       int i;

       video = (unsigned char *) VIDEO;

       for (i = 0; i < COLUMNS * LINES * 2; i++)
         *(video + i) = 0;

       xpos = 0;
       ypos = 0;
     }

     /* Convert the integer D to a string and save the string in BUF. If
        BASE is equal to 'd', interpret that D is decimal, and if BASE is
        equal to 'x', interpret that D is hexadecimal. */
     static void
     itoa (char *buf, int base, int d)
     {
       char *p = buf;
       char *p1, *p2;
       unsigned long ud = d;
       int divisor = 10;

       /* If %d is specified and D is minus, put `-' in the head. */
       if (base == 'd' && d < 0)
         {
           *p++ = '-';
           buf++;
           ud = -d;
         }
       else if (base == 'x')
         divisor = 16;

       /* Divide UD by DIVISOR until UD == 0. */
       do
         {
           int remainder = ud % divisor;

           *p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
         }
       while (ud /= divisor);

       /* Terminate BUF. */
       *p = 0;

       /* Reverse BUF. */
       p1 = buf;
       p2 = p - 1;
       while (p1 < p2)
         {
           char tmp = *p1;
           *p1 = *p2;
           *p2 = tmp;
           p1++;
           p2--;
         }
     }

     /* Put the character C on the screen. */
     /* 将一个字符输出到屏幕上 */
     static void
     putchar (int c)
     {
       if (c == '\n' || c == '\r')
         {
         newline:
           xpos = 0;
           ypos++;
           if (ypos >= LINES)
             ypos = 0;
           return;
         }

       *(video + (xpos + ypos * COLUMNS) * 2) = c & 0xFF;
       *(video + (xpos + ypos * COLUMNS) * 2 + 1) = ATTRIBUTE;

       xpos++;
       if (xpos >= COLUMNS)
         goto newline;
     }

     /* Format a string and print it on the screen, just like the libc
        function printf. */

     /* 格式化一个字符串，就像libc中的printf的函数一样，将其输出到屏幕上 */

     void
     printf (const char *format, ...)
     {
       char **arg = (char **) &format;
       int c;
       char buf[20];

       arg++;

       while ((c = *format++) != 0)
         {
           if (c != '%')
             putchar (c);
           else
             {
               char *p, *p2;
               int pad0 = 0, pad = 0;

               c = *format++;
               if (c == '0')
                 {
                   pad0 = 1;
                   c = *format++;
                 }

               if (c >= '0' && c <= '9')
                 {
                   pad = c - '0';
                   c = *format++;
                 }

               switch (c)
                 {
                 case 'd':
                 case 'u':
                 case 'x':
                   itoa (buf, c, *((int *) arg++));
                   p = buf;
                   goto string;
                   break;

                 case 's':
                   p = *arg++;
                   if (! p)
                     p = "(null)";

                 string:
                   for (p2 = p; *p2; p2++);
                   for (; p2 < p + pad; p2++)
                     putchar (pad0 ? '0' : ' ');
                   while (*p)
                     putchar (*p++);
                   break;

                 default:
                   putchar (*((int *) arg++));
                   break;
                 }
             }
         }
     }


File: multiboot.info,  Node: Other Multiboot kernels,  Prev: kernel.c,  Up: Example OS code

4.3.4 Other Multiboot kernels
-----------------------------

Other useful information should be available in Multiboot kernels, such
as GNU Mach and Fiasco `http://os.inf.tu-dresden.de/fiasco/'. And, it
is worth mentioning the OSKit
`http://www.cs.utah.edu/projects/flux/oskit/', which provides a library
supporting the specification.


File: multiboot.info,  Node: Example boot loader code,  Prev: Example OS code,  Up: Examples

4.4 Example boot loader code
============================

The GNU GRUB (*note GRUB: (grub.info)Top.) project is a
Multiboot-compliant boot loader, supporting all required and many
optional features present in this specification. A public release has
not been made, but the test release is available from:

   `ftp://alpha.gnu.org/gnu/grub'

   See the webpage `http://www.gnu.org/software/grub/grub.html', for
more information.


File: multiboot.info,  Node: History,  Next: Invoking mbchk,  Prev: Examples,  Up: Top

5 The change log of this specification
**************************************

0.7
        * "Multiboot Standard" is renamed to "Multiboot Specification".

        * Graphics fields are added to Multiboot header.

        * BIOS drive information, BIOS configuration table, the name of
          a boot loader, APM information, and graphics information are
          added to Multiboot information.

        * Rewritten in Texinfo format.

        * Rewritten, using more strict words.

        * The maintainer changes to the GNU GRUB maintainer team
          <bug-grub@gnu.org>, from Bryan Ford and Erich Stefan Boleyn.

        * The byte order of the `boot_device' in Multiboot information
          is reversed. This was a mistake.

        * The offset of the address fields were wrong.

        * The format is adapted to a newer Texinfo, and the version
          number is specified more explicitly in the title.

0.6
        * A few wording changes.

        * Header checksum.

        * Classification of machine state passed to an operating system.

0.5
        * Name change.

0.4
        * Major changes plus HTMLification.


File: multiboot.info,  Node: Invoking mbchk,  Next: Index,  Prev: History,  Up: Top

6 Invoking mbchk
****************

关于程序 mbchk

   The program `mbchk' checks for the format of a Multiboot kernel. We
recommend using this program before booting your own kernel.

   `mbchk' accepts the following options:

   `mbchk' 接受如下选项参数：

`--help'
     Print a summary of the command-line options and exit.

     打印命令选项参数的说明总结并且退出。

`--version'
     Print the version number of GRUB and exit.

     打印GRUB的版本号并退出。

`--quiet'
     Suppress all normal output.


File: multiboot.info,  Node: Index,  Prev: Invoking mbchk,  Up: Top

Index
*****

 [index ]
* Menu:


Tag Table:
Node: Top1030
Node: Overview2357
Node: Motivation2929
Node: Architecture5411
Node: Operating systems6220
Node: Boot sources7581
Node: Boot-time configuration9239
Node: Convenience to operating systems10118
Node: Boot modules14052
Node: Terminology15211
Node: Specification19596
Node: OS image format20385
Node: Header layout22066
Node: Header magic fields24255
Node: Header address fields29269
Node: Header graphics fields31115
Node: Machine state32432
Node: Boot information format34692
Node: Examples52608
Node: Notes on PC52981
Node: BIOS device mapping techniques54547
Node: Data comparison technique55457
Node: I/O restriction technique56319
Node: Example OS code57536
Node: multiboot.h59089
Node: boot.S68954
Node: kernel.c72413
Node: Other Multiboot kernels84821
Node: Example boot loader code85252
Node: History85778
Node: Invoking mbchk87009
Node: Index87643

End Tag Table


Local Variables:
coding: utf-8
End:
